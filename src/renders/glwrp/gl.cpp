/*******************************************************************************
 * DSE - disba1ancer's (graphic) engine.
 *
 * Copyright (c) 2019 disba1ancer.
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *******************************************************************************/
/*
 * gl.cpp
 *
 *  Created on: 28 мар. 2019 г.
 *      Author: disba1ancer
 */

#include "gl.h"

//IMPLEMENT_GL_FUNCTION(glGenVertexArrays, GLGENVERTEXARRAYS);
//IMPLEMENT_GL_FUNCTION(glBindVertexArray, GLBINDVERTEXARRAY);
//IMPLEMENT_GL_FUNCTION(glDeleteVertexArrays, GLDELETEVERTEXARRAYS);
//IMPLEMENT_GL_FUNCTION(glGenBuffers, GLGENBUFFERS);
//IMPLEMENT_GL_FUNCTION(glBindBuffer, GLBINDBUFFER);
//IMPLEMENT_GL_FUNCTION(glBufferData, GLBUFFERDATA);
//IMPLEMENT_GL_FUNCTION(glDeleteBuffers, GLDELETEBUFFERS);
//IMPLEMENT_GL_FUNCTION(glEnableVertexAttribArray, GLENABLEVERTEXATTRIBARRAY);
//IMPLEMENT_GL_FUNCTION(glVertexAttribPointer, GLVERTEXATTRIBPOINTER);
//IMPLEMENT_GL_FUNCTION(glDisableVertexAttribArray, GLDISABLEVERTEXATTRIBARRAY);
//IMPLEMENT_GL_FUNCTION(glCreateShader, GLCREATESHADER);
//IMPLEMENT_GL_FUNCTION(glShaderSource, GLSHADERSOURCE);
//IMPLEMENT_GL_FUNCTION(glCompileShader, GLCOMPILESHADER);
//IMPLEMENT_GL_FUNCTION(glCreateProgram, GLCREATEPROGRAM);
//IMPLEMENT_GL_FUNCTION(glDeleteProgram, GLDELETEPROGRAM);
//IMPLEMENT_GL_FUNCTION(glAttachShader, GLATTACHSHADER);
//IMPLEMENT_GL_FUNCTION(glLinkProgram, GLLINKPROGRAM);
//IMPLEMENT_GL_FUNCTION(glDeleteShader, GLDELETESHADER);
//IMPLEMENT_GL_FUNCTION(glUseProgram, GLUSEPROGRAM);
//IMPLEMENT_GL_FUNCTION(glGetUniformLocation, GLGETUNIFORMLOCATION);
//IMPLEMENT_GL_FUNCTION(glUniformMatrix4fv, GLUNIFORMMATRIX4FV);
//IMPLEMENT_GL_FUNCTION(glGenFramebuffers, GLGENFRAMEBUFFERS);
//IMPLEMENT_GL_FUNCTION(glFramebufferTexture, GLFRAMEBUFFERTEXTURE);
//IMPLEMENT_GL_FUNCTION(glBindFramebuffer, GLBINDFRAMEBUFFER);
//IMPLEMENT_GL_FUNCTION(glBlitFramebuffer, GLBLITFRAMEBUFFER);
//IMPLEMENT_GL_FUNCTION(glFramebufferRenderbuffer, GLFRAMEBUFFERRENDERBUFFER);
//IMPLEMENT_GL_FUNCTION(glGetUniformfv, GLGETUNIFORMFV);
//IMPLEMENT_GL_FUNCTION(glActiveTexture, GLACTIVETEXTURE);
//IMPLEMENT_GL_FUNCTION(glGetAttribLocation, GLGETATTRIBLOCATION);
//IMPLEMENT_GL_FUNCTION(glUniform1i, GLUNIFORM1I);
//IMPLEMENT_GL_FUNCTION(glTexImage3D, GLTEXIMAGE3D);
//IMPLEMENT_GL_FUNCTION(glGetShaderiv, GLGETSHADERIV);
//IMPLEMENT_GL_FUNCTION(glGetShaderInfoLog, GLGETSHADERINFOLOG);
//IMPLEMENT_GL_FUNCTION(glGetProgramiv, GLGETPROGRAMIV);
//IMPLEMENT_GL_FUNCTION(glGetProgramInfoLog, GLGETPROGRAMINFOLOG);
//IMPLEMENT_GL_FUNCTION(glBufferSubData, GLBUFFERSUBDATA);
//IMPLEMENT_GL_FUNCTION(glBindAttribLocation, GLBINDATTRIBLOCATION);
//IMPLEMENT_GL_FUNCTION(glGetStringi, GLGETSTRINGI);
//IMPLEMENT_GL_FUNCTION(glVertexAttribDivisor, GLVERTEXATTRIBDIVISOR);
//IMPLEMENT_GL_FUNCTION(glVertexAttribDivisorARB, GLVERTEXATTRIBDIVISORARB);
//IMPLEMENT_GL_FUNCTION(glDrawElementsBaseVertex, GLDRAWELEMENTSBASEVERTEX);
//IMPLEMENT_GL_FUNCTION(glUniform2f, GLUNIFORM2F);
//IMPLEMENT_GL_FUNCTION(glGetFramebufferAttachmentParameteriv, GLGETFRAMEBUFFERATTACHMENTPARAMETERIV);
//IMPLEMENT_GL_FUNCTION(glBindFragDataLocation, GLBINDFRAGDATALOCATION);
//IMPLEMENT_GL_FUNCTION(glUniform3fv, GLUNIFORM3FV);
//IMPLEMENT_GL_FUNCTION(glUniform4fv, GLUNIFORM4FV);
//IMPLEMENT_GL_FUNCTION(glUniform1f, GLUNIFORM1F);
//IMPLEMENT_GL_FUNCTION(glDeleteFramebuffers, GLDELETEFRAMEBUFFERS);
//IMPLEMENT_GL_FUNCTION(glFramebufferTexture2D, GLFRAMEBUFFERTEXTURE2D);
//IMPLEMENT_GL_FUNCTION(glCheckFramebufferStatus, GLCHECKFRAMEBUFFERSTATUS);
//IMPLEMENT_GL_FUNCTION(glClearBufferfv, GLCLEARBUFFERFV);
//IMPLEMENT_GL_FUNCTION(glGenRenderbuffers, GLGENRENDERBUFFERS);
//IMPLEMENT_GL_FUNCTION(glDeleteRenderbuffers, GLDELETERENDERBUFFERS);
//IMPLEMENT_GL_FUNCTION(glBindRenderbuffer, GLBINDRENDERBUFFER);
//IMPLEMENT_GL_FUNCTION(glRenderbufferStorage, GLRENDERBUFFERSTORAGE);
//IMPLEMENT_GL_FUNCTION(glRenderbufferStorageMultisample, GLRENDERBUFFERSTORAGEMULTISAMPLE);
//IMPLEMENT_GL_FUNCTION(glUniform4f, GLUNIFORM4F);

#ifdef _WIN32
IMPLEMENT_GL_FUNCTION(wglChoosePixelFormatARB, WGLCHOOSEPIXELFORMATARB);
IMPLEMENT_GL_FUNCTION(wglCreateContextAttribsARB, WGLCREATECONTEXTATTRIBSARB);
IMPLEMENT_GL_FUNCTION(wglSwapIntervalEXT, WGLSWAPINTERVALEXT);
IMPLEMENT_GL_FUNCTION(wglGetExtensionsStringARB, WGLGETEXTENSIONSSTRINGARB);

#endif
