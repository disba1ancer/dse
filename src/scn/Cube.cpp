/*
 * Cube.cpp
 *
 *  Created on: 16 февр. 2020 г.
 *      Author: disba1ancer
 */

#include "Cube.h"
#include <cstring>

namespace {
static const dse::scn::IMesh::vertex vertices[24] = {
		{{ 1, -1, -1}, { 1, 0, 0}, {0, 1, 0}, {0, 0}, 0},//+x
		{{ 1, -1,  1}, { 1, 0, 0}, {0, 1, 0}, {0, 1}, 0},//1
		{{ 1,  1, -1}, { 1, 0, 0}, {0, 1, 0}, {1, 0}, 0},//2
		{{ 1,  1,  1}, { 1, 0, 0}, {0, 1, 0}, {1, 1}, 0},//3

		{{-1, -1, -1}, {-1, 0, 0}, {0, 1, 0}, {0, 0}, 0},//-x
		{{-1, -1,  1}, {-1, 0, 0}, {0, 1, 0}, {0, 1}, 0},//5
		{{-1,  1, -1}, {-1, 0, 0}, {0, 1, 0}, {1, 0}, 0},//6
		{{-1,  1,  1}, {-1, 0, 0}, {0, 1, 0}, {1, 1}, 0},//7

		{{-1,  1, -1}, {0,  1, 0}, {1, 0, 0}, {0, 0}, 0},//+y
		{{ 1,  1, -1}, {0,  1, 0}, {1, 0, 0}, {0, 1}, 0},//9
		{{-1,  1,  1}, {0,  1, 0}, {1, 0, 0}, {1, 0}, 0},//10
		{{ 1,  1,  1}, {0,  1, 0}, {1, 0, 0}, {1, 1}, 0},//11

		{{-1, -1, -1}, {0, -1, 0}, {1, 0, 0}, {0, 0}, 0},//-y
		{{ 1, -1, -1}, {0, -1, 0}, {1, 0, 0}, {0, 1}, 0},//13
		{{-1, -1,  1}, {0, -1, 0}, {1, 0, 0}, {1, 0}, 0},//14
		{{ 1, -1,  1}, {0, -1, 0}, {1, 0, 0}, {1, 1}, 0},//15

		{{-1, -1,  1}, {0, 0,  1}, {1, 0, 0}, {0, 0}, 0},//+z
		{{-1,  1,  1}, {0, 0,  1}, {1, 0, 0}, {0, 1}, 0},//17
		{{ 1, -1,  1}, {0, 0,  1}, {1, 0, 0}, {1, 0}, 0},//18
		{{ 1,  1,  1}, {0, 0,  1}, {1, 0, 0}, {1, 1}, 0},//19

		{{-1, -1, -1}, {0, 0, -1}, {1, 0, 0}, {0, 0}, 0},//-z
		{{-1,  1, -1}, {0, 0, -1}, {1, 0, 0}, {0, 1}, 0},//21
		{{ 1, -1, -1}, {0, 0, -1}, {1, 0, 0}, {1, 0}, 0},//22
		{{ 1,  1, -1}, {0, 0, -1}, {1, 0, 0}, {1, 1}, 0} //23
};
static const std::uint32_t elements[36] = {
		 0,  1,  2,  3,  2,  1,//+x
		 4,  5,  6,  7,  6,  5,//-x
		 8,  9, 10, 11, 10,  9,//+y
		12, 13, 14, 15, 14, 13,//-y
		16, 17, 18, 19, 18, 17,//+z
		20, 21, 22, 23, 22, 21,//-z
};
}

namespace dse {
namespace scn {

void Cube::fillSubmeshBuffers(std::uint32_t, vertex *vertexBuffer, std::uint32_t *elementBuffer) {
	std::memcpy(vertexBuffer, vertices, sizeof(vertices));
	std::memcpy(elementBuffer, elements, sizeof(elements));
}

std::uint32_t Cube::getSubmeshCount() {
	return 1;
}

IMesh::submesh_size Cube::getSubmeshSize(std::uint32_t submeshIndex) {
	static_cast<void>(submeshIndex);
	return {(sizeof(vertices) / sizeof(vertex)), (sizeof(elements) / sizeof(std::uint32_t))};
}

} /* namespace scn */
} /* namespace dse */
